//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ExcelRead
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class musaEntities : DbContext
    {
        public musaEntities()
            : base("name=musaEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<DefectCodeMaster> DefectCodeMasters { get; set; }
        public DbSet<assembly_line_master> assembly_line_master { get; set; }
        public DbSet<defect> defects { get; set; }
        public DbSet<Defect_comment> Defect_comment { get; set; }
        public DbSet<Deleted_sales_order> Deleted_sales_order { get; set; }
        public DbSet<despatch_closure_master> despatch_closure_master { get; set; }
        public DbSet<dyno_test> dyno_test { get; set; }
        public DbSet<inspection_parameter_master> inspection_parameter_master { get; set; }
        public DbSet<Inspection_Test_Details> Inspection_Test_Details { get; set; }
        public DbSet<inspection_type_master> inspection_type_master { get; set; }
        public DbSet<material_master> material_master { get; set; }
        public DbSet<material_type> material_type { get; set; }
        public DbSet<mechanic_tractor_mapping> mechanic_tractor_mapping { get; set; }
        public DbSet<part_master> part_master { get; set; }
        public DbSet<part_materialcode_master> part_materialcode_master { get; set; }
        public DbSet<performby_test> performby_test { get; set; }
        public DbSet<planned_order_master> planned_order_master { get; set; }
        public DbSet<plant_master> plant_master { get; set; }
        public DbSet<sales_order_logs_master> sales_order_logs_master { get; set; }
        public DbSet<sales_order_master> sales_order_master { get; set; }
        public DbSet<sop_document_master> sop_document_master { get; set; }
        public DbSet<sop_version_master> sop_version_master { get; set; }
        public DbSet<task_master> task_master { get; set; }
        public DbSet<tire_brand_master> tire_brand_master { get; set; }
        public DbSet<tire_type_master> tire_type_master { get; set; }
        public DbSet<tireType_Group_mapping> tireType_Group_mapping { get; set; }
        public DbSet<tractor_master> tractor_master { get; set; }
        public DbSet<user_master> user_master { get; set; }
        public DbSet<user_type_master> user_type_master { get; set; }
    
        public virtual ObjectResult<chkDuplicateSalesOrder_Result> chkDuplicateSalesOrder()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<chkDuplicateSalesOrder_Result>("chkDuplicateSalesOrder");
        }
    
        public virtual ObjectResult<ClosedSalesOrderReport_Result> ClosedSalesOrderReport(Nullable<long> plantId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var plantIdParameter = plantId.HasValue ?
                new ObjectParameter("PlantId", plantId) :
                new ObjectParameter("PlantId", typeof(long));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClosedSalesOrderReport_Result>("ClosedSalesOrderReport", plantIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<DealerIssuesSalesOrdersReport_Result> DealerIssuesSalesOrdersReport(Nullable<long> plantId, Nullable<long> componentId, string fromDate, string toDate)
        {
            var plantIdParameter = plantId.HasValue ?
                new ObjectParameter("PlantId", plantId) :
                new ObjectParameter("PlantId", typeof(long));
    
            var componentIdParameter = componentId.HasValue ?
                new ObjectParameter("ComponentId", componentId) :
                new ObjectParameter("ComponentId", typeof(long));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DealerIssuesSalesOrdersReport_Result>("DealerIssuesSalesOrdersReport", plantIdParameter, componentIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<Defect_Count_Result> Defect_Count(Nullable<long> plantId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var plantIdParameter = plantId.HasValue ?
                new ObjectParameter("PlantId", plantId) :
                new ObjectParameter("PlantId", typeof(long));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Defect_Count_Result>("Defect_Count", plantIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<DefectReport_Result> DefectReport(string tractorSrNo, Nullable<long> plantId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<long> inspectionType)
        {
            var tractorSrNoParameter = tractorSrNo != null ?
                new ObjectParameter("TractorSrNo", tractorSrNo) :
                new ObjectParameter("TractorSrNo", typeof(string));
    
            var plantIdParameter = plantId.HasValue ?
                new ObjectParameter("PlantId", plantId) :
                new ObjectParameter("PlantId", typeof(long));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var inspectionTypeParameter = inspectionType.HasValue ?
                new ObjectParameter("InspectionType", inspectionType) :
                new ObjectParameter("InspectionType", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DefectReport_Result>("DefectReport", tractorSrNoParameter, plantIdParameter, fromDateParameter, toDateParameter, inspectionTypeParameter);
        }
    
        public virtual ObjectResult<GetInspectionStatus_Result> GetInspectionStatus(Nullable<long> plantId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<long> lineId)
        {
            var plantIdParameter = plantId.HasValue ?
                new ObjectParameter("PlantId", plantId) :
                new ObjectParameter("PlantId", typeof(long));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var lineIdParameter = lineId.HasValue ?
                new ObjectParameter("LineId", lineId) :
                new ObjectParameter("LineId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetInspectionStatus_Result>("GetInspectionStatus", plantIdParameter, fromDateParameter, toDateParameter, lineIdParameter);
        }
    
        public virtual ObjectResult<MonthWiseActualShipment_Result> MonthWiseActualShipment(Nullable<long> plantId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var plantIdParameter = plantId.HasValue ?
                new ObjectParameter("PlantId", plantId) :
                new ObjectParameter("PlantId", typeof(long));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MonthWiseActualShipment_Result>("MonthWiseActualShipment", plantIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<monthwiseSalesOrder_Result> monthwiseSalesOrder(Nullable<long> plantId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var plantIdParameter = plantId.HasValue ?
                new ObjectParameter("PlantId", plantId) :
                new ObjectParameter("PlantId", typeof(long));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<monthwiseSalesOrder_Result>("monthwiseSalesOrder", plantIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<NewlyAddedDefectReportSyn_Result> NewlyAddedDefectReportSyn()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NewlyAddedDefectReportSyn_Result>("NewlyAddedDefectReportSyn");
        }
    
        public virtual ObjectResult<NoMaterialSalesOrdersReport_Result> NoMaterialSalesOrdersReport(Nullable<long> plantId, Nullable<long> componentId, string fromDate, string toDate)
        {
            var plantIdParameter = plantId.HasValue ?
                new ObjectParameter("PlantId", plantId) :
                new ObjectParameter("PlantId", typeof(long));
    
            var componentIdParameter = componentId.HasValue ?
                new ObjectParameter("ComponentId", componentId) :
                new ObjectParameter("ComponentId", typeof(long));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NoMaterialSalesOrdersReport_Result>("NoMaterialSalesOrdersReport", plantIdParameter, componentIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<OpenSalesOrderRepor_Result> OpenSalesOrderRepor(Nullable<long> plantId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var plantIdParameter = plantId.HasValue ?
                new ObjectParameter("PlantId", plantId) :
                new ObjectParameter("PlantId", typeof(long));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<OpenSalesOrderRepor_Result>("OpenSalesOrderRepor", plantIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<OrderDaysIntervalCount_Result> OrderDaysIntervalCount(Nullable<long> plantId, string fromDate, string toDate)
        {
            var plantIdParameter = plantId.HasValue ?
                new ObjectParameter("PlantId", plantId) :
                new ObjectParameter("PlantId", typeof(long));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<OrderDaysIntervalCount_Result>("OrderDaysIntervalCount", plantIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual int OrderDaysIntervalCountPlantWise(Nullable<long> plantId, string fromDate, string toDate)
        {
            var plantIdParameter = plantId.HasValue ?
                new ObjectParameter("PlantId", plantId) :
                new ObjectParameter("PlantId", typeof(long));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("OrderDaysIntervalCountPlantWise", plantIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<OrderPlanningReport_Result> OrderPlanningReport(Nullable<long> plantId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string dealerCode, string salesOrderNo)
        {
            var plantIdParameter = plantId.HasValue ?
                new ObjectParameter("PlantId", plantId) :
                new ObjectParameter("PlantId", typeof(long));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var dealerCodeParameter = dealerCode != null ?
                new ObjectParameter("DealerCode", dealerCode) :
                new ObjectParameter("DealerCode", typeof(string));
    
            var salesOrderNoParameter = salesOrderNo != null ?
                new ObjectParameter("SalesOrderNo", salesOrderNo) :
                new ObjectParameter("SalesOrderNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<OrderPlanningReport_Result>("OrderPlanningReport", plantIdParameter, fromDateParameter, toDateParameter, dealerCodeParameter, salesOrderNoParameter);
        }
    
        public virtual ObjectResult<OrderPlanningReport_Archive_Result> OrderPlanningReport_Archive(Nullable<long> plantId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var plantIdParameter = plantId.HasValue ?
                new ObjectParameter("PlantId", plantId) :
                new ObjectParameter("PlantId", typeof(long));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<OrderPlanningReport_Archive_Result>("OrderPlanningReport_Archive", plantIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<OrderTotalApprovedCountPlantWise_Result> OrderTotalApprovedCountPlantWise(Nullable<long> plantId, string fromDate, string toDate)
        {
            var plantIdParameter = plantId.HasValue ?
                new ObjectParameter("PlantId", plantId) :
                new ObjectParameter("PlantId", typeof(long));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<OrderTotalApprovedCountPlantWise_Result>("OrderTotalApprovedCountPlantWise", plantIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<PerfomedByDetailReport_Result> PerfomedByDetailReport(Nullable<long> plantId, string tractorSrNo)
        {
            var plantIdParameter = plantId.HasValue ?
                new ObjectParameter("PlantId", plantId) :
                new ObjectParameter("PlantId", typeof(long));
    
            var tractorSrNoParameter = tractorSrNo != null ?
                new ObjectParameter("TractorSrNo", tractorSrNo) :
                new ObjectParameter("TractorSrNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PerfomedByDetailReport_Result>("PerfomedByDetailReport", plantIdParameter, tractorSrNoParameter);
        }
    
        public virtual ObjectResult<PossibleBillingSalesOrdersReport_Result> PossibleBillingSalesOrdersReport(Nullable<long> plantId, Nullable<long> componentId, string fromDate, string toDate)
        {
            var plantIdParameter = plantId.HasValue ?
                new ObjectParameter("PlantId", plantId) :
                new ObjectParameter("PlantId", typeof(long));
    
            var componentIdParameter = componentId.HasValue ?
                new ObjectParameter("ComponentId", componentId) :
                new ObjectParameter("ComponentId", typeof(long));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PossibleBillingSalesOrdersReport_Result>("PossibleBillingSalesOrdersReport", plantIdParameter, componentIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<ProductionPlanSalesOrdersReport_Result> ProductionPlanSalesOrdersReport(Nullable<long> plantId, Nullable<long> componentId, string fromDate, string toDate)
        {
            var plantIdParameter = plantId.HasValue ?
                new ObjectParameter("PlantId", plantId) :
                new ObjectParameter("PlantId", typeof(long));
    
            var componentIdParameter = componentId.HasValue ?
                new ObjectParameter("ComponentId", componentId) :
                new ObjectParameter("ComponentId", typeof(long));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProductionPlanSalesOrdersReport_Result>("ProductionPlanSalesOrdersReport", plantIdParameter, componentIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<ResolvedDefectToSAP_Result> ResolvedDefectToSAP()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ResolvedDefectToSAP_Result>("ResolvedDefectToSAP");
        }
    
        public virtual ObjectResult<SalesOrderLogReport_Result> SalesOrderLogReport(Nullable<long> platid, Nullable<long> userid, Nullable<long> usertypeid, string salesOrderNo, string serial_no)
        {
            var platidParameter = platid.HasValue ?
                new ObjectParameter("platid", platid) :
                new ObjectParameter("platid", typeof(long));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(long));
    
            var usertypeidParameter = usertypeid.HasValue ?
                new ObjectParameter("usertypeid", usertypeid) :
                new ObjectParameter("usertypeid", typeof(long));
    
            var salesOrderNoParameter = salesOrderNo != null ?
                new ObjectParameter("salesOrderNo", salesOrderNo) :
                new ObjectParameter("salesOrderNo", typeof(string));
    
            var serial_noParameter = serial_no != null ?
                new ObjectParameter("serial_no", serial_no) :
                new ObjectParameter("serial_no", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SalesOrderLogReport_Result>("SalesOrderLogReport", platidParameter, useridParameter, usertypeidParameter, salesOrderNoParameter, serial_noParameter);
        }
    }
}
